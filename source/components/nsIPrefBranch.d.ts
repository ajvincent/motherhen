// Generated by github:trickypr/webidl2ts

type nsIObserver = any;
/**
 * The nsIPrefBranch interface is used to manipulate the preferences data. This
 * object may be obtained from the preferences service (nsIPrefService) and
 * used to get and set default and/or user preferences across the application.
 *
 * This object is created with a "root" value which describes the base point in
 * the preferences "tree" from which this "branch" stems. Preferences are
 * accessed off of this root by using just the final portion of the preference.
 * For example, if this object is created with the root "browser.startup.",
 * the preferences "browser.startup.page", "browser.startup.homepage",
 * and "browser.startup.homepage_override" can be accessed by simply passing
 * "page", "homepage", or "homepage_override" to the various Get/Set methods.
 *
 * @see nsIPrefService
 */
interface nsIPrefBranch extends nsISupports {
    readonly PREF_INVALID: number;
    readonly PREF_STRING: number;
    readonly PREF_INT: number;
    readonly PREF_BOOL: number;
    /**
     * Called to get the root on which this branch is based, such as
     * "browser.startup."
     */
    readonly root: ACString;
    /**
     * Called to determine the type of a specific preference.
     *
     * @param aPrefName The preference to get the type of.
     *
     * @return long     A value representing the type of the preference. This
     * value will be PREF_STRING, PREF_INT, or PREF_BOOL.
     */
    getPrefType(aPrefName: string): number;
    /**
     * Called to get the state of an individual boolean preference.
     *
     * @param aPrefName The boolean preference to get the state of.
     * @param aDefaultValue The value to return if the preference is not set.
     *
     * @return boolean  The value of the requested boolean preference.
     *
     * @see setBoolPref
     */
    getBoolPref(aPrefName: string, aDefaultValue?: boolean): boolean;
    getBoolPrefXPCOM(aPrefName: string): boolean;
    /**
     * Called to set the state of an individual boolean preference.
     *
     * @param aPrefName The boolean preference to set the state of.
     * @param aValue    The boolean value to set the preference to.
     *
     * @throws Error if setting failed or the preference has a default
     * value of a type other than boolean.
     *
     * @see getBoolPref
     */
    setBoolPref(aPrefName: string, aValue: boolean): void;
    /**
     * Called to get the state of an individual floating-point preference.
     * "Floating point" preferences are really string preferences that
     * are converted to floating point numbers.
     *
     * @param aPrefName The floating point preference to get the state of.
     * @param aDefaultValue The value to return if the preference is not set.
     *
     * @return float  The value of the requested floating point preference.
     *
     * @see setCharPref
     */
    getFloatPref(aPrefName: string, aDefaultValue?: number): number;
    getFloatPrefXPCOM(aPrefName: string): number;
    /**
     * Called to get the state of an individual ascii string preference.
     *
     * @param aPrefName The string preference to retrieve.
     * @param aDefaultValue The string to return if the preference is not set.
     *
     * @return ACString   The value of the requested string preference.
     *
     * @see setCharPref
     */
    getCharPref(aPrefName: string, aDefaultValue?: ACString): ACString;
    getCharPrefXPCOM(aPrefName: string): ACString;
    /**
     * Called to set the state of an individual ascii string preference.
     *
     * @param aPrefName The string preference to set.
     * @param aValue    The string value to set the preference to.
     *
     * @throws Error if setting failed or the preference has a default
     * value of a type other than string.
     *
     * @see getCharPref
     */
    setCharPref(aPrefName: string, aValue: ACString): void;
    /**
     * Called to get the state of an individual unicode string preference.
     *
     * @param aPrefName The string preference to retrieve.
     * @param aDefaultValue The string to return if the preference is not set.
     *
     * @return AUTF8String   The value of the requested string preference.
     *
     * @see setStringPref
     */
    getStringPref(aPrefName: string, aDefaultValue?: AUTF8String): AUTF8String;
    /**
     * Called to set the state of an individual unicode string preference.
     *
     * @param aPrefName The string preference to set.
     * @param aValue    The string value to set the preference to.
     *
     * @throws Error if setting failed or the preference has a default
     * value of a type other than string.
     *
     * @see getStringPref
     */
    setStringPref(aPrefName: string, aValue: AUTF8String): void;
    /**
     * Called to get the state of an individual integer preference.
     *
     * @param aPrefName The integer preference to get the value of.
     * @param aDefaultValue The value to return if the preference is not set.
     *
     * @return long     The value of the requested integer preference.
     *
     * @see setIntPref
     */
    getIntPref(aPrefName: string, aDefaultValue?: number): number;
    getIntPrefXPCOM(aPrefName: string): number;
    /**
     * Called to set the state of an individual integer preference.
     *
     * @param aPrefName The integer preference to set the value of.
     * @param aValue    The integer value to set the preference to.
     *
     * @throws Error if setting failed or the preference has a default
     * value of a type other than integer.
     *
     * @see getIntPref
     */
    setIntPref(aPrefName: string, aValue: number): void;
    /**
     * Called to get the state of an individual complex preference. A complex
     * preference is a preference which represents an XPCOM object that can not
     * be easily represented using a standard boolean, integer or string value.
     *
     * @param aPrefName The complex preference to get the value of.
     * @param aType     The XPCOM interface that this complex preference
     * represents. Interfaces currently supported are:
     * - nsIFile
     * - nsIPrefLocalizedString (Localized UniChar)
     * @param aValue    The XPCOM object into which to the complex preference
     * value should be retrieved.
     *
     * @throws Error The value does not exist or is the wrong type.
     *
     * @see setComplexValue
     */
    getComplexValue(aPrefName: string, aType: nsIIDRef, aValue: nsQIResult): void;
    /**
     * Called to set the state of an individual complex preference. A complex
     * preference is a preference which represents an XPCOM object that can not
     * be easily represented using a standard boolean, integer or string value.
     *
     * @param aPrefName The complex preference to set the value of.
     * @param aType     The XPCOM interface that this complex preference
     * represents. Interfaces currently supported are:
     * - nsIFile
     * - nsISupportsString (UniChar)
     * (deprecated; see setStringPref)
     * - nsIPrefLocalizedString (Localized UniChar)
     * @param aValue    The XPCOM object from which to set the complex preference
     * value.
     *
     * @throws Error if setting failed or the value is the wrong type.
     *
     * @see getComplexValue
     */
    setComplexValue(aPrefName: string, aType: nsIIDRef, aValue: nsISupports): void;
    /**
     * Called to clear a user set value from a specific preference. This will, in
     * effect, reset the value to the default value. If no default value exists
     * the preference will cease to exist.
     *
     * @param aPrefName The preference to be cleared.
     *
     * @note
     * This method does nothing if this object is a default branch.
     */
    clearUserPref(aPrefName: string): void;
    /**
     * Called to lock a specific preference. Locking a preference will cause the
     * preference service to always return the default value regardless of
     * whether there is a user set value or not.
     *
     * @param aPrefName The preference to be locked.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the default branch.
     *
     * @throws Error The preference does not exist or an error occurred.
     *
     * @see unlockPref
     */
    lockPref(aPrefName: string): void;
    /**
     * Called to check if a specific preference has a user value associated to
     * it.
     *
     * @param aPrefName The preference to be tested.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the user branch.
     *
     * @note
     * If a preference was manually set to a value that equals the default value,
     * then the preference no longer has a user set value, i.e. it is
     * considered reset to its default value.
     * In particular, this method will return false for such a preference and
     * the preference will not be saved to a file by nsIPrefService.savePrefFile.
     *
     * @return boolean  true  The preference has a user set value.
     * false The preference only has a default value.
     */
    prefHasUserValue(aPrefName: string): boolean;
    /**
     * Called to check if a specific preference has a default value associated to
     * it.
     *
     * @param aPrefName The preference to be tested.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the user branch.
     *
     * @note
     * This method can be used to distinguish between a built-in preference and a
     * user-added preference.
     *
     * @return boolean  true  The preference has a default value.
     * false The preference only has a user value.
     */
    prefHasDefaultValue(aPrefName: string): boolean;
    /**
     * Called to check if a specific preference is locked. If a preference is
     * locked calling its Get method will always return the default value.
     *
     * @param aPrefName The preference to be tested.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the default branch.
     *
     * @return boolean  true  The preference is locked.
     * false The preference is not locked.
     *
     * @see lockPref
     * @see unlockPref
     */
    prefIsLocked(aPrefName: string): boolean;
    /**
     * Called to check if a specific preference has been sanitized. If a
     * preference is sanitized, any user value the preference may have will not
     * be present in a sub-process.  A preference is never sanitized in the
     * parent process; it is only marked as sanitized when it is converted
     * to a dom::Pref for serialization to a child process.
     *
     * @param aPrefName The preference to be tested.
     *
     * @note
     * This method can be called on either a default or user branch but it
     * makes no difference.
     *
     * @return boolean  true  The preference is sanitized.
     * false The preference is not sanitized.
     */
    prefIsSanitized(aPrefName: string): boolean;
    /**
     * Called to unlock a specific preference. Unlocking a previously locked
     * preference allows the preference service to once again return the user set
     * value of the preference.
     *
     * @param aPrefName The preference to be unlocked.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the default branch.
     *
     * @throws Error The preference does not exist or an error occurred.
     *
     * @see lockPref
     */
    unlockPref(aPrefName: string): void;
    /**
     * Called to remove all of the preferences referenced by this branch.
     *
     * @param aStartingAt The point on the branch at which to start the deleting
     * preferences. Pass in "" to remove all preferences
     * referenced by this branch.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on both.
     *
     * @throws Error The preference(s) do not exist or an error occurred.
     */
    deleteBranch(aStartingAt: string): void;
    /**
     * Returns an array of strings representing the child preferences of the
     * root of this branch.
     *
     * @param aStartingAt The point on the branch at which to start enumerating
     * the child preferences. Pass in "" to enumerate all
     * preferences referenced by this branch.
     * @return            The array of child preferences.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on both.
     *
     * @throws Error The preference(s) do not exist or an error occurred.
     */
    getChildList(aStartingAt: string): Array<ACString>;
    /**
     * Called to reset all of the preferences referenced by this branch to their
     * default values.
     *
     * @param aStartingAt The point on the branch at which to start the resetting
     * preferences to their default values. Pass in "" to
     * reset all preferences referenced by this branch.
     *
     * @note
     * This method can be called on either a default or user branch but, in
     * effect, always operates on the user branch.
     *
     * @throws Error The preference(s) do not exist or an error occurred.
     */
    resetBranch(aStartingAt: string): void;
    /**
     * Add a preference change observer. On preference changes, the following
     * arguments will be passed to the nsIObserver.observe() method:
     * aSubject - The nsIPrefBranch object (this)
     * aTopic   - The string defined by NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
     * aData    - The name of the preference which has changed, relative to
     * the |root| of the aSubject branch.
     *
     * aSubject.get*Pref(aData) will get the new value of the modified
     * preference. For example, if your observer is registered with
     * addObserver("bar.", ...) on a branch with root "foo.", modifying
     * the preference "foo.bar.baz" will trigger the observer, and aData
     * parameter will be "bar.baz".
     *
     * @param aDomain   The preference on which to listen for changes. This can
     * be the name of an entire branch to observe.
     * e.g. Holding the "root" prefbranch and calling
     * addObserver("foo.bar.", ...) will observe changes to
     * foo.bar.baz and foo.bar.bzip
     * @param aObserver The object to be notified if the preference changes.
     * @param aHoldWeak true  Hold a weak reference to |aObserver|. The object
     * must implement the nsISupportsWeakReference
     * interface or this will fail.
     * false Hold a strong reference to |aObserver|.
     *
     * @note
     * Registering as a preference observer can open an object to potential
     * cyclical references which will cause memory leaks. These cycles generally
     * occur because an object both registers itself as an observer (causing the
     * branch to hold a reference to the observer) and holds a reference to the
     * branch object for the purpose of getting/setting preference values. There
     * are 3 approaches which have been implemented in an attempt to avoid these
     * situations.
     * 1) The nsPrefBranch object supports nsISupportsWeakReference. Any consumer
     * may hold a weak reference to it instead of a strong one.
     * 2) The nsPrefBranch object listens for xpcom-shutdown and frees all of the
     * objects currently in its observer list. This ensures that long lived
     * objects (services for example) will be freed correctly.
     * 3) The observer can request to be held as a weak reference when it is
     * registered. This insures that shorter lived objects (say one tied to an
     * open window) will not fall into the cyclical reference trap.
     *
     * @note
     * The list of registered observers may be changed during the dispatch of
     * nsPref:changed notification. However, the observers are not guaranteed
     * to be notified in any particular order, so you can't be sure whether the
     * added/removed observer will be called during the notification when it
     * is added/removed.
     *
     * @note
     * It is possible to change preferences during the notification.
     *
     * @note
     * It is not safe to change observers during this callback in Gecko
     * releases before 1.9. If you want a safe way to remove a pref observer,
     * please use an nsITimer.
     *
     * @see nsIObserver
     * @see removeObserver
     */
    addObserver(aDomain: ACString, aObserver: nsIObserver, aHoldWeak?: boolean): void;
    /**
     * Remove a preference change observer.
     *
     * @param aDomain   The preference which is being observed for changes.
     * @param aObserver An observer previously registered with addObserver().
     *
     * @note
     * Note that you must call removeObserver() on the same nsIPrefBranch
     * instance on which you called addObserver() in order to remove aObserver;
     * otherwise, the observer will not be removed.
     *
     * @see nsIObserver
     * @see addObserver
     */
    removeObserver(aDomain: ACString, aObserver: nsIObserver): void;
}
type AString = string;
type ACString = string;
type AUTF8String = string;
type nsIIDRef = any;
type nsQIResult = any;
type MozExternalRefCountType = number;
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * The mother of all xpcom interfaces.
 *
 *
 *
 * /**
 * Basic component object model interface. Objects which implement
 * this interface support runtime interface discovery (QueryInterface)
 * and a reference counted memory model (AddRef/Release). This is
 * modelled after the win32 IUnknown API.
 *
 * Historically, nsISupports needed to be binary compatible with COM's
 * IUnknown, so the IID of nsISupports is the same as it. That is no
 * longer a goal, and hopefully nobody depends on it. We may break
 * this compatibility at any time.
 */
interface nsISupports {
    /**
     * A run time mechanism for interface discovery.
     * @param aIID [in] A requested interface IID
     * @param aInstancePtr [out] A pointer to an interface pointer to
     * receive the result.
     * @return <b>NS_OK</b> if the interface is supported by the associated
     * instance, <b>NS_NOINTERFACE</b> if it is not.
     *
     * aInstancePtr must not be null.
     */
    QueryInterface(aIID: nsIIDRef, aInstancePtr: nsQIResult): void;
    /**
     * Increases the reference count for this interface.
     * The associated instance will not be deleted unless
     * the reference count is returned to zero.
     *
     * @return The resulting reference count.
     */
    AddRef(): MozExternalRefCountType;
    /**
     * Decreases the reference count for this interface.
     * Generally, if the reference count returns to zero,
     * the associated instance is deleted.
     *
     * @return The resulting reference count.
     */
    Release(): MozExternalRefCountType;
}